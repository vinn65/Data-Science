
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "COMMENT DELIMITER ELSE IDENTIFIER IF KEYWORD NUMBER OPERATOR PRINT STRINGprogram : statement_liststatement_list : statement\n    | statement statement_liststatement : expression_statement\n    | var_declaration\n    | if_statement\n    | print_statementexpression_statement : expression DELIMITERexpression : primary_expression\n    | binary_expressionprimary_expression : IDENTIFIER\n    | NUMBER\n    | STRINGif_statement : IF expression '{' statement_list '}'\n    | IF expression '{' statement_list '}' ELSE '{' statement_list '}'print_statement : PRINT '(' expression ')' DELIMITERbinary_expression : expression OPERATOR expressionvar_declaration : KEYWORD IDENTIFIER '=' expression DELIMITER"
    
_lr_action_items = {'KEYWORD':([0,3,4,5,6,7,18,25,30,31,32,34,36,],[9,9,-4,-5,-6,-7,-8,9,-18,-14,-16,9,-15,]),'IF':([0,3,4,5,6,7,18,25,30,31,32,34,36,],[11,11,-4,-5,-6,-7,-8,11,-18,-14,-16,11,-15,]),'PRINT':([0,3,4,5,6,7,18,25,30,31,32,34,36,],[12,12,-4,-5,-6,-7,-8,12,-18,-14,-16,12,-15,]),'IDENTIFIER':([0,3,4,5,6,7,9,11,18,19,22,24,25,30,31,32,34,36,],[10,10,-4,-5,-6,-7,20,10,-8,10,10,10,10,-18,-14,-16,10,-15,]),'NUMBER':([0,3,4,5,6,7,11,18,19,22,24,25,30,31,32,34,36,],[15,15,-4,-5,-6,-7,15,-8,15,15,15,15,-18,-14,-16,15,-15,]),'STRING':([0,3,4,5,6,7,11,18,19,22,24,25,30,31,32,34,36,],[16,16,-4,-5,-6,-7,16,-8,16,16,16,16,-18,-14,-16,16,-15,]),'$end':([1,2,3,4,5,6,7,17,18,30,31,32,36,],[0,-1,-2,-4,-5,-6,-7,-3,-8,-18,-14,-16,-15,]),'}':([3,4,5,6,7,17,18,28,30,31,32,35,36,],[-2,-4,-5,-6,-7,-3,-8,31,-18,-14,-16,36,-15,]),'DELIMITER':([8,10,13,14,15,16,23,27,29,],[18,-11,-9,-10,-12,-13,-17,30,32,]),'OPERATOR':([8,10,13,14,15,16,21,23,26,27,],[19,-11,-9,-10,-12,-13,19,19,19,19,]),'{':([10,13,14,15,16,21,23,33,],[-11,-9,-10,-12,-13,25,-17,34,]),')':([10,13,14,15,16,23,26,],[-11,-9,-10,-12,-13,-17,29,]),'(':([12,],[22,]),'=':([20,],[24,]),'ELSE':([31,],[33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,25,34,],[2,17,28,35,]),'statement':([0,3,25,34,],[3,3,3,3,]),'expression_statement':([0,3,25,34,],[4,4,4,4,]),'var_declaration':([0,3,25,34,],[5,5,5,5,]),'if_statement':([0,3,25,34,],[6,6,6,6,]),'print_statement':([0,3,25,34,],[7,7,7,7,]),'expression':([0,3,11,19,22,24,25,34,],[8,8,21,23,26,27,8,8,]),'primary_expression':([0,3,11,19,22,24,25,34,],[13,13,13,13,13,13,13,13,]),'binary_expression':([0,3,11,19,22,24,25,34,],[14,14,14,14,14,14,14,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','icg.py',77),
  ('statement_list -> statement','statement_list',1,'p_statement_list','icg.py',84),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','icg.py',85),
  ('statement -> expression_statement','statement',1,'p_statement','icg.py',90),
  ('statement -> var_declaration','statement',1,'p_statement','icg.py',91),
  ('statement -> if_statement','statement',1,'p_statement','icg.py',92),
  ('statement -> print_statement','statement',1,'p_statement','icg.py',93),
  ('expression_statement -> expression DELIMITER','expression_statement',2,'p_expression_statement','icg.py',98),
  ('expression -> primary_expression','expression',1,'p_expression','icg.py',103),
  ('expression -> binary_expression','expression',1,'p_expression','icg.py',104),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','icg.py',109),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression','icg.py',110),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','icg.py',111),
  ('if_statement -> IF expression { statement_list }','if_statement',5,'p_if_statement','icg.py',116),
  ('if_statement -> IF expression { statement_list } ELSE { statement_list }','if_statement',9,'p_if_statement','icg.py',117),
  ('print_statement -> PRINT ( expression ) DELIMITER','print_statement',5,'p_print_statement','icg.py',143),
  ('binary_expression -> expression OPERATOR expression','binary_expression',3,'p_binary_expression','icg.py',149),
  ('var_declaration -> KEYWORD IDENTIFIER = expression DELIMITER','var_declaration',5,'p_var_declaration','icg.py',156),
]
